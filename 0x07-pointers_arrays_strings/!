<a href = "https://github.com/Gtindi/alx-low_level_programming">Back</a>
<h1> Even more pointers, arrays and strings </h1>

| TaskNo | Name | Explanation | Code |
|--------|--------|---------|--------|
| 0 | 0-memset.c | Write a function that fills memory with a constant byte.<ul><li> Prototype: `char *_memset(char *s, char b, unsigned int n);`</li><li> The `_memset()` function fills the first n bytes of the memory area pointed to by `s` with the constant byte `b`</li><li>Returns a pointer to the memory area `s`</li>FYI: The standard library provides a similar function: `memset`. Run `man memset` to learn more. | <a href = "https://github.com/Gtindi/alx-low_level_programming/blob/test/0x07-pointers_arrays_strings/0-memset.c"> View Code </a> |
| 1 | 1-memcpy.c | Write a function that copies memory area.<ul><li> Prototype: `char *_memcpy(char *dest, char *src, unsigned int n);`</li><li>The `_memcpy()` function copies `n` bytes from memory area `src` to memory area `dest`</li><li> Returns a pointer to `dest`</li></ul>FYI: The standard library provides a similar function: `memcpy`. Run `man memcpy` to learn more. |<a href = "https://github.com/Gtindi/alx-low_level_programming/blob/test/0x07-pointers_arrays_strings/1-memcpy.c"> View Code </a> |
| 2 | 2-strchr.c | Write a function that locates a character in a string.<ul><li> Prototype: `char *_strchr(char *s, char c);`</li><li> Returns a pointer to the first occurrence of the character `c` in the string `s`, or `NULL` if the character is not found</li>FYI: The standard library provides a similar function: `strchr`. Run `man strchr` to learn more. | <a href = "https://github.com/Gtindi/alx-low_level_programming/blob/test/0x07-pointers_arrays_strings/2-strchr.c"> View Code </a> |
| 3 | 3-strspn.c | Write a function that gets the length of a prefix substring.<ul><li>Prototype: `unsigned int _strspn(char *s, char *accept);`</li><li>Returns the number of bytes in the initial segment of s which consist only of bytes from `accept`</li> FYI: The standard library provides a similar function: `strspn`. Run `man strspn` to learn more. | <a href = "https://github.com/Gtindi/alx-low_level_programming/blob/test/0x07-pointers_arrays_strings/3-strspn.c"> View Code </a> |
| 4 | 4-strpbrk.c | Write a function that searches a string for any of a set of bytes.<ul><li>Prototype: `char *_strpbrk(char *s, char *accept);`</li><li>The `_strpbrk()` function locates the first occurrence in the string s of any of the bytes in the string `accept`</li><li>Returns a pointer to the byte in `s` that matches one of the bytes in `accept`, or `NULL` if no such byte is found</li></ul>FYI: The standard library provides a similar function: `strpbrk`. Run `man strpbrk` to learn more. | <a href = "https://github.com/Gtindi/alx-low_level_programming/blob/test/0x07-pointers_arrays_strings/4-strpbrk.c"> View Code </a> |
| 5 | 5-strstr.c | Write a function that locates a substring.<ul><li>Prototype: `char *_strstr(char *haystack, char *needle);`</li><li>The `_strstr()` function finds the first occurrence of the substring `needle` in the string `haystack`. The terminating null bytes (`\0`) are not compared</li><li>Returns a pointer to the beginning of the located substring, or `NULL` if the substring is not found.</li></ul>FYI: The standard library provides a similar function: `strstr`. Run `man strstr` to learn more. | <a href = "https://github.com/Gtindi/alx-low_level_programming/blob/test/0x07-pointers_arrays_strings/5-strstr.c"> View Code </a> |
| 6 | 7-print_chessboard.c | Write a function that prints the chessboard.<ul><li>Prototype: `void print_chessboard(char (*a)[8]);`</li></ul> | <a href = "https://github.com/Gtindi/alx-low_level_programming/blob/test/0x07-pointers_arrays_strings/7-print_chessboard.c"> View Code </a> |
| 7 | 8-print_diagsums.c | Write a function that prints the sum of the two diagonals of a square matrix of integers.<ul><li>Prototype: `void print_diagsums(int *a, int size);`</li><li>Format: see example</li><li>You are allowed to use the standard library</li>Note that in the following example we are casting an `int[][]` into an `int*`. This is not something you should do. The goal here is to make sure you understand how an array of array is stored in memory. | <a href = "https://github.com/Gtindi/alx-low_level_programming/blob/test/0x07-pointers_arrays_strings/8-print_diagsums.c"> View Code </a> |
| 8 | 100-set_string.c | Write a function that sets the value of a pointer to a char.<ul><li>Prototype: `void set_string(char **s, char *to);`</li></ul> | <a href = "https://github.com/Gtindi/alx-low_level_programming/blob/test/0x07-pointers_arrays_strings/100-set_string.c"> View Code </a> |
| 9 | 101-crackme_password |Create a file that contains the password for the <a href = "https://github.com/holbertonschool/0x06.c">crackme2</a> executable.<ul><li>Your file should contain the exact password, no new line, no extra space</li><li>`ltrace`, `ldd`, `gdb` and `objdump` can help</li><li>You may need to install the `openssl` library to run the `crakme2` program: `sudo apt install libssl-dev`</li><li>Edit the source list `sudo nano /etc/apt/sources.list` to add the following line: `deb http://security.ubuntu.com/ubuntu xenial-security main` Then `sudo apt update` and `sudo apt install libssl1.0.0` | <a href = "https://github.com/Gtindiaalx-low_level_programming/blob/test/0x07-pointers_arrays_strings/101-crackme_password"> View Code </a> |
